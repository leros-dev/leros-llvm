# After Instruction Selection:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = COPY $r100
  STIND_PSEUDO %0:gpr, %stack.0, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $r1, implicit $r1
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  ADJCALLSTACKUP 0, 0, implicit-def dead $r1, implicit $r1
  %1:gpr = COPY $r4
  STIND_PSEUDO %1:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %2:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %3:gpr = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed %3:gpr, killed %2:gpr, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %6:gpr = nsw ADDI_PSEUDO killed %5:gpr, 1
  STIND_PSEUDO killed %6:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  %4:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r4 = COPY %4:gpr
  RET implicit $r0, implicit $r4

# End machine code for function main.

# After Expand ISel Pseudo-instructions:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = COPY $r100
  STIND_PSEUDO %0:gpr, %stack.0, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $r1, implicit $r1
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  ADJCALLSTACKUP 0, 0, implicit-def dead $r1, implicit $r1
  %1:gpr = COPY $r4
  STIND_PSEUDO %1:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %2:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %3:gpr = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed %3:gpr, killed %2:gpr, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %6:gpr = nsw ADDI_PSEUDO killed %5:gpr, 1
  STIND_PSEUDO killed %6:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  %4:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r4 = COPY %4:gpr
  RET implicit $r0, implicit $r4

# End machine code for function main.

# After Local Stack Slot Allocation:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = COPY $r100
  STIND_PSEUDO %0:gpr, %stack.0, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $r1, implicit $r1
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  ADJCALLSTACKUP 0, 0, implicit-def dead $r1, implicit $r1
  %1:gpr = COPY $r4
  STIND_PSEUDO %1:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %2:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %3:gpr = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed %3:gpr, killed %2:gpr, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %6:gpr = nsw ADDI_PSEUDO killed %5:gpr, 1
  STIND_PSEUDO killed %6:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  %4:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r4 = COPY %4:gpr
  RET implicit $r0, implicit $r4

# End machine code for function main.

main
# After Leros Parallel Path pass:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = COPY $r100
  STIND_PSEUDO %0:gpr, %stack.0, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $r1, implicit $r1
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  ADJCALLSTACKUP 0, 0, implicit-def dead $r1, implicit $r1
  %1:gpr = COPY $r4
  STIND_PSEUDO %1:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %2:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %3:gpr = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed %3:gpr, killed %2:gpr, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %6:gpr = nsw ADDI_PSEUDO killed %5:gpr, 1
  STIND_PSEUDO killed %6:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  %4:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r4 = COPY %4:gpr
  RET implicit $r0, implicit $r4

# End machine code for function main.

# After Eliminate PHI nodes for register allocation:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = COPY $r100
  STIND_PSEUDO %0:gpr, %stack.0, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $r1, implicit $r1
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  ADJCALLSTACKUP 0, 0, implicit-def dead $r1, implicit $r1
  %1:gpr = COPY $r4
  STIND_PSEUDO %1:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %2:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %3:gpr = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed %3:gpr, killed %2:gpr, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %6:gpr = nsw ADDI_PSEUDO killed %5:gpr, 1
  STIND_PSEUDO killed %6:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  %4:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r4 = COPY %4:gpr
  RET implicit $r0, implicit $r4

# End machine code for function main.

# After Two-Address instruction pass:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %0:gpr = COPY $r100
  STIND_PSEUDO %0:gpr, %stack.0, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $r1, implicit $r1
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  ADJCALLSTACKUP 0, 0, implicit-def dead $r1, implicit $r1
  %1:gpr = COPY $r4
  STIND_PSEUDO %1:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  %2:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %3:gpr = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed %3:gpr, killed %2:gpr, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %5:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  %6:gpr = nsw ADDI_PSEUDO killed %5:gpr, 1
  STIND_PSEUDO killed %6:gpr, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  %4:gpr = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r4 = COPY %4:gpr
  RET implicit $r0, implicit $r4

# End machine code for function main.

# After Fast Register Allocator:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r4 = COPY $r100
  STIND_PSEUDO killed $r4, %stack.0, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $r1, implicit $r1
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  ADJCALLSTACKUP 0, 0, implicit-def dead $r1, implicit $r1
  STIND_PSEUDO killed $r4, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  $r4 = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r5 = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed $r5, killed $r4, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r4 = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  $r4 = nsw ADDI_PSEUDO killed $r4, 1
  STIND_PSEUDO killed $r4, %stack.1, 0 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  $r4 = LDIND_PSEUDO %stack.1, 0 :: (dereferenceable load 4 from %ir.2)
  RET implicit $r0, implicit killed $r4

# End machine code for function main.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r1 = frame-setup ADDI_PSEUDO $r1, -32
  STIND_PSEUDO killed $r0, $r1, 28
  STIND_PSEUDO killed $r1, $r1, 24
  STIND_PSEUDO killed $r2, $r1, 20
  $r2 = frame-setup ADDI_PSEUDO $r1, 32
  $r4 = COPY $r100
  STIND_PSEUDO killed $r4, $r2, -16 :: (store 4 into %ir.1)
  PseudoCALL @rand, <regmask $r0 $r1 $r2 $r12 $r13 $r14 $r15 $r16 $r17 $r18 $r19 $r20>, implicit-def dead $r0, implicit-def $r1, implicit-def $r4
  STIND_PSEUDO killed $r4, $r2, -20 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  $r4 = LDIND_PSEUDO $r2, -20 :: (dereferenceable load 4 from %ir.2)
  $r5 = LOAD_IMM32_PSEUDO 99
  BRLT_PSEUDO killed $r5, killed $r4, %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r4 = LDIND_PSEUDO $r2, -20 :: (dereferenceable load 4 from %ir.2)
  $r4 = nsw ADDI_PSEUDO killed $r4, 1
  STIND_PSEUDO killed $r4, $r2, -20 :: (store 4 into %ir.2)
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  $r4 = LDIND_PSEUDO $r2, -20 :: (dereferenceable load 4 from %ir.2)
  $r2 = LDIND_PSEUDO $r1, 20
  $r1 = LDIND_PSEUDO $r1, 24
  $r0 = LDIND_PSEUDO $r1, 28
  $r1 = frame-destroy ADDI_PSEUDO $r1, 32
  RET implicit $r0, implicit killed $r4

# End machine code for function main.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  LDADDR $r1
  STIND_MI 24
  LOAD_MI $r2
  LDADDR $r1
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  LOAD_MI $r5
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOAD_MI $r4
  ADDI_MI 1
  STORE_MI $r4
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDADDR $r1
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  LDADDR $r1
  STIND_MI 24
  LOAD_MI $r2
  LDADDR $r1
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  LOAD_MI $r5
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOAD_MI $r4
  ADDI_MI 1
  STORE_MI $r4
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDADDR $r1
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After Leros accumulator usage pass:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  STIND_MI 24
  LOAD_MI $r2
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  ADDI_MI 1
  STORE_MI $r4
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After Contiguously Lay Out Funclets:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  STIND_MI 24
  LOAD_MI $r2
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  ADDI_MI 1
  STORE_MI $r4
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After StackMap Liveness Analysis:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  STIND_MI 24
  LOAD_MI $r2
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  ADDI_MI 1
  STORE_MI $r4
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After Live DEBUG_VALUE analysis:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  STIND_MI 24
  LOAD_MI $r2
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  ADDI_MI 1
  STORE_MI $r4
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After Insert fentry calls:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  STIND_MI 24
  LOAD_MI $r2
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  ADDI_MI 1
  STORE_MI $r4
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After Insert XRay ops:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  STIND_MI 24
  LOAD_MI $r2
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  ADDI_MI 1
  STORE_MI $r4
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

# After Implement the 'patchable-function' attribute:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
  fi#4: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LOAD_MI $r1
  ADDI_MI -32
  STORE_MI $r1
  LOAD_MI $r0
  LDADDR $r1
  STIND_MI 28
  LOAD_MI $r1
  STIND_MI 24
  LOAD_MI $r2
  STIND_MI 20
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r2
  LOAD_MI $r100
  STORE_MI $r4
  LDADDR $r2
  STIND_MI -16
  LOADI_MI target-flags(<unknown>) @rand
  LOADHI_MI target-flags(<unknown>) @rand
  LOADH2I_MI target-flags(<unknown>) @rand
  LOADH3I_MI target-flags(<unknown>) @rand
  JAL_call $r0, implicit $r0
  LOAD_MI $r4
  LDADDR $r2
  STIND_MI -20
  BR_MI %bb.1

bb.1 (%ir-block.4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LOADI_MI 99
  $r5 = STORE_MI
  SUB_MI $r4
  BRN_MI %bb.3
  BR_MI %bb.2

bb.2 (%ir-block.7):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  LDADDR $r2
  LDIND_MI -20
  ADDI_MI 1
  STORE_MI $r4
  STIND_MI -20
  BR_MI %bb.1

bb.3 (%ir-block.10):
; predecessors: %bb.1

  LDADDR $r2
  LDIND_MI -20
  STORE_MI $r4
  LDADDR $r1
  LDIND_MI 20
  STORE_MI $r2
  LDIND_MI 24
  STORE_MI $r1
  LDADDR $r1
  LDIND_MI 28
  STORE_MI $r0
  LOAD_MI $r1
  ADDI_MI 32
  STORE_MI $r1
  LOAD_MI $r0
  JAL_ret $r0, implicit $r0

# End machine code for function main.

